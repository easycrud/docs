import{_ as e,c as s,o as a,a as n}from"./app.4062934c.js";const D=JSON.parse('{"title":"RESTful API","description":"","frontmatter":{},"headers":[{"level":2,"title":"Endpoints","slug":"endpoints","link":"#endpoints","children":[]},{"level":2,"title":"Primary Keys","slug":"primary-keys","link":"#primary-keys","children":[]},{"level":2,"title":"Request","slug":"request","link":"#request","children":[]},{"level":2,"title":"Search","slug":"search","link":"#search","children":[]},{"level":2,"title":"Response","slug":"response","link":"#response","children":[]}],"relativePath":"guide/restful-api-endpoints.md","lastUpdated":1673257287000}'),o={name:"guide/restful-api-endpoints.md"},l=n(`<h1 id="restful-api" tabindex="-1">RESTful API <a class="header-anchor" href="#restful-api" aria-hidden="true">#</a></h1><p>Based on JSON Table Schema, <code>@easycrud/server</code> package is able to generate RESTful style APIs for performing CRUD (create, read, update, delete) operations on resources.</p><h2 id="endpoints" tabindex="-1">Endpoints <a class="header-anchor" href="#endpoints" aria-hidden="true">#</a></h2><p>Based on a JSON Table Schema, the generated resource endpoints are:</p><blockquote><p><code>{resource}</code> is alias or name of the table.</p></blockquote><ul><li><code>GET /all_{resource}</code><br> Get all resources without pagination. Depends on size of the table, this endpoint may returns a large dataset.</li><li><code>GET /{resource}?[page=n&amp;pageSize=m]</code><br> Get a collection resource with pagination. The default value of <code>pageSize</code> is 20.</li><li><code>GET /{resource}/:pk</code><br> Get a singleton resource by primary key.</li><li><code>POST /{resource}</code><br> Create a new resource.</li><li><code>PUT /{resource}/:pk</code><br> Update a resource by primary key.</li><li><code>DELETE /{resource}/:pk</code><br> Delete a resource by primary key.</li></ul><h2 id="primary-keys" tabindex="-1">Primary Keys <a class="header-anchor" href="#primary-keys" aria-hidden="true">#</a></h2><p>For the table has multiple primary keys, a singleton resource can be accessed using <code>/{resource}/:pk1/:pk2/...</code>.</p><h2 id="request" tabindex="-1">Request <a class="header-anchor" href="#request" aria-hidden="true">#</a></h2><p>To create/update a resource, the <code>POST</code> and <code>PUT</code> methods send JSON data with header <code>Content-Type: application/json</code>. The request data is required to put into the field <code>data</code>.</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">data</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">key</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="search" tabindex="-1">Search <a class="header-anchor" href="#search" aria-hidden="true">#</a></h2><p>The endpoint for retriving a collection resource can be appended query parameters to filter the result.</p><ul><li>fuzzy search: <code>field=value</code></li><li>range search: <code>field=value1,value2</code> (field &gt; value1 and field &lt; value2)</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>More complicated operations will be supported in the future.</p></div><h2 id="response" tabindex="-1">Response <a class="header-anchor" href="#response" aria-hidden="true">#</a></h2><p>All endpoints return the standard data format in JSON:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">code</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">msg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">success</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">data</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,18),t=[l];function r(p,c,i,d,u,y){return a(),s("div",null,t)}const F=e(o,[["render",r]]);export{D as __pageData,F as default};
